A0A_test rice
2005
2005 ['2005'] 2005
predicted_years: ['2005'] max_epochs: 1500 batch_size: 128 learning_rate 0.0001 loss_func_metric: RMSE seed: 123456 lr_milestones_list: [20, 50, 600, 800]
loading data/ALIM128F64DATASET_rice.csv Thu Apr 27 20:11:56 2023
data/ALIM128F64DATASET_rice.csv loaded Thu Apr 27 20:12:07 2023
<class 'pandas.core.series.Series'> <class 'pandas.core.series.Series'> <class 'numpy.int64'>
['county', 'year', 'month', 'gstage', 'time_idx', 'actuals', 'rice_sownarea', 'avg_rice_sownarea', 'med_rice_sownarea', 'rice_yieldval', 'avg_rice_yieldval', 'med_rice_yieldval', 'rice_yield', 'avg_rice_yield', 'med_rice_yield']
['2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018']
2005 <class 'str'>
Years to train: ['2003', '2004', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018']
Years to valid: ['2005']
--------check 2008----------------------
Years to train: ['2003' '2004' '2006' '2007' '2009' '2010' '2011' '2012' '2013' '2014'
 '2015' '2016' '2017' '2018']
Years to valid: ['2005']
Years to valid: ['2005']
------------------------------
DATA_VAL: ['0'] (918, 2809)
DATA_VAL: ['0'] (918, 2809)
DATA_VAL: ['0'] (34, 2809)
Augmentation for years list: [2003, 2004, 2006, 2007, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018] by NSAMPLES=1 and YEARS_MAX_LENGTH=5
type(self.data_train[time_idx]) <class 'pandas.core.series.Series'>
time_idx [  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127 128 129 130 131 132 133 134 135]
sample ['0']
county ['0' '1' '2' '3' '4' '5' '6' '7' '8' '9' '11' '12' '13' '14' '15' '16'
 '17' '19' '21' '22' '23' '24' '25' '26' '27' '29' '30']
df[year].unique() ['2003' '2017' '2006' '2005']
df[time_idx].to_numpy() [  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127 128 129 130 131 132 133 134 135]
self.val_years[0]: ['2005'] ['2003' '2017' '2006' '2005' '2015' '2004' '2007' '2013' '2018' '2010'
 '2012' '2009' '2014' '2016' '2011']
self.val_years[0]: 2005 ['2003' '2017' '2006' '2005']
ival_years: ['2005', '2005', '2005']
30 4
last_year: ['2005']
34 [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 29 30 31 32 33]
34 [102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119
 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135]
[102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119
 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135]
Dataframe size: 77.24 Mb
DataGenerator done...
Set basic filenames self.name_for_files: EXP_[A0A_test]-Cr[rice]-KF[2005]-BS[128]]
avg_med: ['avg_rice_yield', 'actuals']
training mx_epochs, TimeSeriesDataSet: 1500 Thu Apr 27 20:12:30 2023
D1: known-unknown go --------------------------
D2: --------------------------
Thu Apr 27 20:12:30 2023
training & validation TimeSeriesDataSet loaded Thu Apr 27 20:12:31 2023
self.train_dataloader: 21
self.val_dataloader: 1
self.test_dataloader: 1
Thu Apr 27 20:12:32 2023
Baseline: tensor(0.0251, device='cuda:0')
Baseline: <class 'tuple'> <class 'torch.Tensor'> <class 'tuple'>
Baseline: (tensor([[0.8400, 0.8400, 0.8400, 0.8400, 0.6250, 0.6250, 0.6250, 0.6250],
        [0.7600, 0.7600, 0.7600, 0.7600, 0.7293, 0.7293, 0.7293, 0.7293],
        [0.6400, 0.6400, 0.6400, 0.6400, 0.6129, 0.6129, 0.6129, 0.6129],
        [0.6200, 0.6200, 0.6200, 0.6200, 0.5851, 0.5851, 0.5851, 0.5851],
        [0.6400, 0.6400, 0.6400, 0.6400, 0.6427, 0.6427, 0.6427, 0.6427],
        [0.8200, 0.8200, 0.8200, 0.8200, 0.7997, 0.7997, 0.7997, 0.7997],
        [0.7400, 0.7400, 0.7400, 0.7400, 0.7040, 0.7040, 0.7040, 0.7040],
        [0.8400, 0.8400, 0.8400, 0.8400, 0.8387, 0.8387, 0.8387, 0.8387],
        [0.7000, 0.7000, 0.7000, 0.7000, 0.6773, 0.6773, 0.6773, 0.6773],
        [0.6000, 0.6000, 0.6000, 0.6000, 0.5692, 0.5692, 0.5692, 0.5692],
        [0.6400, 0.6400, 0.6400, 0.6400, 0.5882, 0.5882, 0.5882, 0.5882],
        [0.7200, 0.7200, 0.7200, 0.7200, 0.6973, 0.6973, 0.6973, 0.6973],
        [0.7500, 0.7500, 0.7500, 0.7500, 0.7215, 0.7215, 0.7215, 0.7215],
        [0.5700, 0.5700, 0.5700, 0.5700, 0.6552, 0.6552, 0.6552, 0.6552],
        [0.6000, 0.6000, 0.6000, 0.6000, 0.6208, 0.6208, 0.6208, 0.6208],
        [0.5500, 0.5500, 0.5500, 0.5500, 0.5392, 0.5392, 0.5392, 0.5392],
        [0.6800, 0.6800, 0.6800, 0.6800, 0.6064, 0.6064, 0.6064, 0.6064],
        [0.7100, 0.7100, 0.7100, 0.7100, 0.8059, 0.8059, 0.8059, 0.8059],
        [0.8300, 0.8300, 0.8300, 0.8300, 0.8570, 0.8570, 0.8570, 0.8570],
        [0.5100, 0.5100, 0.5100, 0.5100, 0.3358, 0.3358, 0.3358, 0.3358],
        [0.8300, 0.8300, 0.8300, 0.8300, 0.7765, 0.7765, 0.7765, 0.7765],
        [0.6800, 0.6800, 0.6800, 0.6800, 0.7359, 0.7359, 0.7359, 0.7359],
        [0.7700, 0.7700, 0.7700, 0.7700, 0.7328, 0.7328, 0.7328, 0.7328],
        [0.7800, 0.7800, 0.7800, 0.7800, 0.7237, 0.7237, 0.7237, 0.7237],
        [0.7000, 0.7000, 0.7000, 0.7000, 0.6796, 0.6796, 0.6796, 0.6796],
        [0.8300, 0.8300, 0.8300, 0.8300, 0.7592, 0.7592, 0.7592, 0.7592],
        [0.8200, 0.8200, 0.8200, 0.8200, 0.7726, 0.7726, 0.7726, 0.7726]],
       device='cuda:0'), None)
Baseline: tensor(0.0251, device='cuda:0')
Baseline: Thu Apr 27 20:12:36 2023
Thu Apr 27 20:12:36 2023
CycicLR: 0.0001 0.01 350 2600 triangular2
on_fit_start: 0.0001
Sanity Checking: 0it [00:00, ?it/s]Sanity Checking:   0%|                                                                                         | 0/1 [00:00<?, ?it/s]Sanity Checking DataLoader 0:   0%|                                                                            | 0/1 [00:00<?, ?it/s]Sanity Checking DataLoader 0: 100%|████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 10.84it/s]on_validaton_epoch_end
ActPred1 <class 'method'>
                                                                                                                                     